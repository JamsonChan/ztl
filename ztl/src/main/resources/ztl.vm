/* ${ztl.fileName}.java

	Purpose:
		
	Description:
		
	History:
		${CreateTime}

Copyright (C) ${Year} Potix Corporation. All Rights Reserved.

This program is distributed under Apache License Version 2.0 in the hope that
it will be useful, but WITHOUT ANY WARRANTY.
*/
#if ($ztl.package != "")
package ${ztl.package};
#end
import org.apache.commons.exec.CommandLine;
import org.apache.commons.exec.DefaultExecutor;
import org.junit.Test;
import org.zkoss.ztl.ConnectionManager;
import org.zkoss.ztl.Element;
import org.zkoss.ztl.JQuery;
import org.zkoss.ztl.Tags;
import org.zkoss.ztl.Widget;
import org.zkoss.ztl.ZK;
import org.zkoss.ztl.ZKParallelClientTestCase;
import org.zkoss.ztl.util.*;

import org.openqa.selenium.*;
import com.thoughtworks.selenium.Selenium;
import com.thoughtworks.selenium.SeleniumException;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.concurrent.Future;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.Date;
import org.zkoss.ztl.util.AggregateError;

#foreach($item in $ztl.import)
import $item;
#end

@Tags(tags = "${ztl.tags}")
public class ${ztl.fileName} extends ZKParallelClientTestCase {
	
	public ${ztl.fileName}() {
		target = "$ztl.server$ztl.contextPath/$ztl.action";
		browsers = getBrowsers("$ztl.browser");
		_timeout = ${ztl.timeout};
		caseID = getClass().getSimpleName();
	}
	
#foreach($case in $ztl.children)
	@Test(expected = AssertionError.class)
	public void test${case.id}() throws AggregateError {
		final long luuid = new Date().getTime();
		System.out.println(getTimeUUID() + "-" + luuid + ":log 1");
		ExecutorService executorService = Executors.newCachedThreadPool();
		final Set<String> browserSet = new HashSet<String>();
		List<Future<?>> futures = new ArrayList<Future<?>>();
		
		for (final Selenium browser : browsers) {
		
			System.out.println(getTimeUUID() + "-" + luuid + ":log 2");
			final ZKSelenium zkSelenium = (ZKSelenium) browser;
			browserSet.add(zkSelenium.getBrowserName());
			System.out.println("add browser: " + zkSelenium.getBrowserName());
			
			futures.add(executorService.submit(new Runnable() {
				
				public void run(){
					System.out.println(getTimeUUID() + "-" + luuid + ":log 3" + ConnectionManager.getInstance().getOpenedRemote(zkSelenium.getBrowserName()));
					try {
						System.out.println(getTimeUUID() + "-" + luuid + ":log 4-1");
						start(browser);
						windowFocus();
						windowMaximize();
						String zscript = "";
						Widget engine = new Widget(new StringBuffer("zk.Desktop._dt"));
						
						System.out.println(getTimeUUID() + "-" + luuid + ":log 4-2");
						
						// remove all of unnecessary children
						if (target.endsWith("/service.zul"))
							removeChildren(engine.firstChild());
					
				/** start **/
#foreach ($source in $case.children)
	#if ( $source.getType() == "Server")
			/** server code **/
				zscript = ""
		#foreach($cnt in $source.contentArray)
			+ $cnt
		#end
			;
				runZscript(zscript);
		#set( $esc = '$' )
		#foreach($ids in $source.idArray)
		Widget $ids = engine.${esc}f("$ids");
		#end
		waitResponse();
	#else
	#set($wait = $source.wait)
		/** client code **/
		#if($wait != "")
		/** set speed depended on test case setting */
				setSpeed("$wait");
		#end
		
		#foreach($cnt in $source.contentArray)
		$cnt
		#end
		
		#if($wait != "")
		/** reset */
				setSpeed("${ztl.delay}");
		#end
	#end	
#end	
	/** end **/
						System.out.println(getTimeUUID() + "-" + luuid + ":log 4-3");
					} catch (SeleniumException e) {
						System.out.println(getTimeUUID() + "-" + luuid + "selenium exception...");
						ConfigHelper.getInstance().clearCache(zkSelenium);
						zkSelenium.shutdown();
						throw e;
					} finally {
						System.out.println(getTimeUUID() + "-" + luuid + ":log 4-4");
						stop();
						System.out.println(getTimeUUID() + "-" + luuid + ":log 4-5");
						browserSet.remove(zkSelenium.getBrowserName());	
						System.out.println(getTimeUUID() + "-" + luuid + ":log 4-6");
					}
					System.out.println(getTimeUUID() + "-" + luuid + ":log 4-7");
				}
			}));
		}
		
		System.out.println(getTimeUUID() + "-" + luuid + ":log 5");
		
		executorService.shutdown();
		try {
			if(!executorService.awaitTermination(_timeout, TimeUnit.MILLISECONDS))
				executorService.shutdownNow();
			
			detectException(futures);
		} catch (AggregateError e) {
			throw e;
		} catch (Exception e) {
			System.out.println(getTimeUUID() + "-" + luuid + ":in termination ex..." + e.getMessage());
			e.printStackTrace();
		}
		
		System.out.println(getTimeUUID() + "-" + luuid + ":log 5-1");
		
		handleTimeout(browserSet, luuid);
		
		System.out.println(getTimeUUID() + "-" + luuid + ":log 6");
		
		waitAndRelease(browserSet);
		
		System.out.println(getTimeUUID() + "-" + luuid + ":log 7");
	}
#end
}



